[{"body":"","categories":["Effective Java"],"description":"","excerpt":"","ref":"/en/docs/effective-java/%E7%AC%AC1%E7%AB%A0-%E5%BC%95%E8%A8%80/","tags":[""],"title":"第1章 引言"},{"body":"","categories":["Effective Java"],"description":"","excerpt":"","ref":"/ja/docs/effective-java/%E7%AC%AC1%E7%AB%A0-%E5%BC%95%E8%A8%80/","tags":[""],"title":"第1章 引言"},{"body":"","categories":["Effective Java"],"description":"","excerpt":"","ref":"/zh-cn/docs/effective-java/%E7%AC%AC1%E7%AB%A0-%E5%BC%95%E8%A8%80/","tags":[""],"title":"第1章 引言"},{"body":" 此文章为自用学习笔记，非书本原文\n目录 ","categories":"","description":"Effective Java中文版(原书第3版)","excerpt":"Effective Java中文版(原书第3版)","ref":"/en/docs/effective-java/","tags":"","title":"Effective Java"},{"body":" 此文章为自用学习笔记，非书本原文\n目录 ","categories":"","description":"Effective Java中文版(原书第3版)","excerpt":"Effective Java中文版(原书第3版)","ref":"/ja/docs/effective-java/","tags":"","title":"Effective Java"},{"body":" 此文章为自用学习笔记，非书本原文\n目录 ","categories":"","description":"Effective Java中文版(原书第3版)","excerpt":"Effective Java中文版(原书第3版)","ref":"/zh-cn/docs/effective-java/","tags":"","title":"Effective Java"},{"body":"第1条：用静态工厂方法代替构造器 提供一个公有的构造方法 缺点： 构造方法没有描述正被返回的对象的名称\n多个构造方法时，记不住用哪个，容易调用错误的构造方法\n// 营养成分 public void NutritionFacts(int servingSize, int servings) { this.servingSize = servingSize; this.servings = servings; } 提供一个公有的静态方法 优点 只是一个返回类的实例的静态方法\n有名称，可通过名称区分\n每次调用它们时，不必每次都创建一个新对象(避免构造重复的对象)\n可以返回原返回类型的任何子类的对象(?)\n所有返回的对象的类可以随着每次调用而发生变化\n方法返回的对象所属的类，在编写包含该静态方法时的类时可以不存在(?)\n缺点 类如果不含公有的或者受保护大的构造方法，就不能被子类化\n很难发现它，在API文档中，没有明确标识出\n静态方法常用方法名称 from、of、valueOf、getInstance、newInstance、getType、newType\nfrom——类型转换方法，只有一个参数，返回该类型的一个相应的实\nDate d = Date.from(instant); of——聚合方法，带有多个参数，返回该类型合并起来的一个实例：Set\u003cRank\u003e faceCads = EnumSet.of(JACK,TOM,KING);\nvalueOf比from和of——更繁琐的一种代替方法：BigInteger prime = BigInteger.valueOf(Integer.MAX_VALUE); instance或者 getInstance ——返回的实例是通过方法的（如有）参数来描述的，但是不能说与参数具有同样的值：StackWalker luke= StackWalker.getInstance(options);\ncreate或者``newInstance ——像instance或者 getInstance 一样，但create或者 newInstance 能够确保每次调用都返回一个**新的实例**：Objectnew Array = Array.newInstance(class0bject,arrayLen);`\ngetType——像 getInstance 一样，但是在静态方法处于不同的类中的时候使用。Type表示静态方法所返回的对象类型：FileStorefs = Files.getFileStore(path);\nnewType——像 newInstance 一样，但是在静态方法处于不同的类中的时候使用。Type表示静态方法所返回的对象类型：BufferedReader br = Files.newBufferedReader(path);\ntype——getType和newType的简版：List\u003c Complainty\u003e litany= Collections.list(legacyLitany);\n","categories":["Effective Java"],"description":"","excerpt":"第1条：用静态工厂方法代替构造器 提供一个公有的构造方法 缺点： 构造方法没有描述正被返回的对象的名称\n多个构造方法时，记不住用哪个，容易调用错误的构造方法\n// 营养成分 public void NutritionFacts(int servingSize, int servings) { this.servingSize = servingSize; this.servings = …","ref":"/en/docs/effective-java/%E7%AC%AC2%E7%AB%A0-%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1/","tags":["Java"],"title":"第2章 创建和销毁对象"},{"body":"第1条：用静态工厂方法代替构造器 提供一个公有的构造方法 缺点： 构造方法没有描述正被返回的对象的名称\n多个构造方法时，记不住用哪个，容易调用错误的构造方法\n// 营养成分 public void NutritionFacts(int servingSize, int servings) { this.servingSize = servingSize; this.servings = servings; } 提供一个公有的静态方法 优点 只是一个返回类的实例的静态方法\n有名称，可通过名称区分\n每次调用它们时，不必每次都创建一个新对象(避免构造重复的对象)\n可以返回原返回类型的任何子类的对象(?)\n所有返回的对象的类可以随着每次调用而发生变化\n方法返回的对象所属的类，在编写包含该静态方法时的类时可以不存在(?)\n缺点 类如果不含公有的或者受保护大的构造方法，就不能被子类化\n很难发现它，在API文档中，没有明确标识出\n静态方法常用方法名称 from、of、valueOf、getInstance、newInstance、getType、newType\nfrom——类型转换方法，只有一个参数，返回该类型的一个相应的实\nDate d = Date.from(instant); of——聚合方法，带有多个参数，返回该类型合并起来的一个实例：Set\u003cRank\u003e faceCads = EnumSet.of(JACK,TOM,KING);\nvalueOf比from和of——更繁琐的一种代替方法：BigInteger prime = BigInteger.valueOf(Integer.MAX_VALUE); instance或者 getInstance ——返回的实例是通过方法的（如有）参数来描述的，但是不能说与参数具有同样的值：StackWalker luke= StackWalker.getInstance(options);\ncreate或者``newInstance ——像instance或者 getInstance 一样，但create或者 newInstance 能够确保每次调用都返回一个**新的实例**：Objectnew Array = Array.newInstance(class0bject,arrayLen);`\ngetType——像 getInstance 一样，但是在静态方法处于不同的类中的时候使用。Type表示静态方法所返回的对象类型：FileStorefs = Files.getFileStore(path);\nnewType——像 newInstance 一样，但是在静态方法处于不同的类中的时候使用。Type表示静态方法所返回的对象类型：BufferedReader br = Files.newBufferedReader(path);\ntype——getType和newType的简版：List\u003c Complainty\u003e litany= Collections.list(legacyLitany);\n","categories":["Effective Java"],"description":"","excerpt":"第1条：用静态工厂方法代替构造器 提供一个公有的构造方法 缺点： 构造方法没有描述正被返回的对象的名称\n多个构造方法时，记不住用哪个，容易调用错误的构造方法\n// 营养成分 public void NutritionFacts(int servingSize, int servings) { this.servingSize = servingSize; this.servings = …","ref":"/ja/docs/effective-java/%E7%AC%AC2%E7%AB%A0-%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1/","tags":["Java"],"title":"第2章 创建和销毁对象"},{"body":"第1条：用静态工厂方法代替构造器 提供一个公有的构造方法 缺点： 构造方法没有描述正被返回的对象的名称\n多个构造方法时，记不住用哪个，容易调用错误的构造方法\n// 营养成分 public void NutritionFacts(int servingSize, int servings) { this.servingSize = servingSize; this.servings = servings; } 提供一个公有的静态方法 优点 只是一个返回类的实例的静态方法\n有名称，可通过名称区分\n每次调用它们时，不必每次都创建一个新对象(避免构造重复的对象)\n可以返回原返回类型的任何子类的对象(?)\n所有返回的对象的类可以随着每次调用而发生变化\n方法返回的对象所属的类，在编写包含该静态方法时的类时可以不存在(?)\n缺点 类如果不含公有的或者受保护大的构造方法，就不能被子类化\n很难发现它，在API文档中，没有明确标识出\n静态方法常用方法名称 from、of、valueOf、getInstance、newInstance、getType、newType\nfrom——类型转换方法，只有一个参数，返回该类型的一个相应的实\nDate d = Date.from(instant); of——聚合方法，带有多个参数，返回该类型合并起来的一个实例：Set\u003cRank\u003e faceCads = EnumSet.of(JACK,TOM,KING);\nvalueOf比from和of——更繁琐的一种代替方法：BigInteger prime = BigInteger.valueOf(Integer.MAX_VALUE); instance或者 getInstance ——返回的实例是通过方法的（如有）参数来描述的，但是不能说与参数具有同样的值：StackWalker luke= StackWalker.getInstance(options);\ncreate或者``newInstance ——像instance或者 getInstance 一样，但create或者 newInstance 能够确保每次调用都返回一个**新的实例**：Objectnew Array = Array.newInstance(class0bject,arrayLen);`\ngetType——像 getInstance 一样，但是在静态方法处于不同的类中的时候使用。Type表示静态方法所返回的对象类型：FileStorefs = Files.getFileStore(path);\nnewType——像 newInstance 一样，但是在静态方法处于不同的类中的时候使用。Type表示静态方法所返回的对象类型：BufferedReader br = Files.newBufferedReader(path);\ntype——getType和newType的简版：List\u003c Complainty\u003e litany= Collections.list(legacyLitany);\n","categories":["Effective Java"],"description":"","excerpt":"第1条：用静态工厂方法代替构造器 提供一个公有的构造方法 缺点： 构造方法没有描述正被返回的对象的名称\n多个构造方法时，记不住用哪个，容易调用错误的构造方法\n// 营养成分 public void NutritionFacts(int servingSize, int servings) { this.servingSize = servingSize; this.servings = …","ref":"/zh-cn/docs/effective-java/%E7%AC%AC2%E7%AB%A0-%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1/","tags":["Java"],"title":"第2章 创建和销毁对象"},{"body":"","categories":"","description":"","excerpt":"","ref":"/en/blog/java/","tags":"","title":"Java"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ja/blog/java/","tags":"","title":"Java"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/blog/java/","tags":"","title":"Java"},{"body":"","categories":"","description":"","excerpt":"","ref":"/en/blog/python/","tags":"","title":"Python"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ja/blog/python/","tags":"","title":"Python"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/blog/python/","tags":"","title":"Python"},{"body":"\r学习笔记\n","categories":"","description":"","excerpt":"\r学习笔记\n","ref":"/en/docs/","tags":"","title":"文档"},{"body":"\r学习笔记\n","categories":"","description":"","excerpt":"\r学习笔记\n","ref":"/ja/docs/","tags":"","title":"文档"},{"body":"\r学习笔记\n","categories":"","description":"","excerpt":"\r学习笔记\n","ref":"/zh-cn/docs/","tags":"","title":"文档"},{"body":"","categories":"","description":"","excerpt":"","ref":"/en/blog/%E6%97%A5%E8%AF%AD/","tags":"","title":"日语"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ja/blog/%E6%97%A5%E8%AF%AD/","tags":"","title":"日语"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/blog/%E6%97%A5%E8%AF%AD/","tags":"","title":"日语"},{"body":" 系统环境：Windows 11 64位\n1.下载Hugo：Hugo Releases ，并解压\n2.添加环境变量\n在设置-系统-系统信息-高级系统设置-环境变量-系统变量-Path添加解压的文件夹目录地址\n或直接搜索编辑系统环境变量 ，在 环境变量-系统变量-Path添加解压的文件夹目录地址\n3.Win+R打开运行输入cmd打开命令指令行，输入\nhugo version 检查全局变量是否生效，返回以下内容说明hugo安装成功\nhugo v0.115.1-857374e69358f788bd31ddc55255c5c8e3dcfd80+extended windows/amd64 BuildDate=2023-07-03T17:28:25Z VendorInfo=gohugoio 4.使用hugo新建一个博客，在命令行输入\n# 两种配置文件格式 hugo new site blog\t# toml格式 hugo new site blog -f yml\t# yml格式 # 生成的目录结构 ├─assets\t资源目录 ├─content\t内容目录(存放.md文件) 就是要发布的文章 ├─data\t数据目录 ├─layouts\t网站模版目录 ├─public\t存放生成的站点文件 ├─static\t静态文件目录(JS、CSS、图片) ├─themes\t主题目录 ├─archetypes\t(存放.md文件的模板) 就是生成文章时用到前言模板 │ default.md 内容模版 └─config.toml\t配置文件 5.启动服务器\ncd blog hugo server 在浏览器输入http://localhost:1313/打开网站\n显示Page Not Found说明网站搭建成功\n6.安装主题\nHugo Themes\n使用的主题模板：docsy\n用git将项目克隆到themes文件夹里面\ndocsy-example\nIncluding images Here’s an image (hugo.jpg) that includes a byline and a caption.\nFetch and scale an image in the upcoming Hugo 0.43. Photo: 你好\rThe front matter of this post specifies properties to be assigned to all image resources:\nresources: - src: \"**.{png,jpg}\" title: \"Image #:counter\" params: byline: \"Photo: Riona MacNamara / CC-BY-CA\" To include the image in a page, specify its details like this:\nFetch and scale an image in the upcoming Hugo 0.43. Photo: 你好\rThe image will be rendered at the size and byline specified in the front matter.\n","categories":"","description":"","excerpt":" 系统环境：Windows 11 64位\n1.下载Hugo：Hugo Releases ，并解压\n2.添加环境变量\n在设置-系统-系统信息-高级系统设置-环境变量-系统变量-Path添加解压的文件夹目录地址\n或直接搜索编辑系统环境变量 ，在 环境变量-系统变量-Path添加解压的文件夹目录地址\n3.Win+R打开运行输入cmd打开命令指令行，输入\nhugo version 检查全局变量是否生效，返 …","ref":"/en/blog/2023/07/06/%E5%87%86%E5%A4%87/","tags":"","title":"准备"},{"body":" 系统环境：Windows 11 64位\n1.下载Hugo：Hugo Releases ，并解压\n2.添加环境变量\n在设置-系统-系统信息-高级系统设置-环境变量-系统变量-Path添加解压的文件夹目录地址\n或直接搜索编辑系统环境变量 ，在 环境变量-系统变量-Path添加解压的文件夹目录地址\n3.Win+R打开运行输入cmd打开命令指令行，输入\nhugo version 检查全局变量是否生效，返回以下内容说明hugo安装成功\nhugo v0.115.1-857374e69358f788bd31ddc55255c5c8e3dcfd80+extended windows/amd64 BuildDate=2023-07-03T17:28:25Z VendorInfo=gohugoio 4.使用hugo新建一个博客，在命令行输入\n# 两种配置文件格式 hugo new site blog\t# toml格式 hugo new site blog -f yml\t# yml格式 # 生成的目录结构 ├─assets\t资源目录 ├─content\t内容目录(存放.md文件) 就是要发布的文章 ├─data\t数据目录 ├─layouts\t网站模版目录 ├─public\t存放生成的站点文件 ├─static\t静态文件目录(JS、CSS、图片) ├─themes\t主题目录 ├─archetypes\t(存放.md文件的模板) 就是生成文章时用到前言模板 │ default.md 内容模版 └─config.toml\t配置文件 5.启动服务器\ncd blog hugo server 在浏览器输入http://localhost:1313/打开网站\n显示Page Not Found说明网站搭建成功\n6.安装主题\nHugo Themes\n使用的主题模板：docsy\n用git将项目克隆到themes文件夹里面\ndocsy-example\nIncluding images Here’s an image (hugo.jpg) that includes a byline and a caption.\nFetch and scale an image in the upcoming Hugo 0.43. Photo: 你好\rThe front matter of this post specifies properties to be assigned to all image resources:\nresources: - src: \"**.{png,jpg}\" title: \"Image #:counter\" params: byline: \"Photo: Riona MacNamara / CC-BY-CA\" To include the image in a page, specify its details like this:\nFetch and scale an image in the upcoming Hugo 0.43. Photo: 你好\rThe image will be rendered at the size and byline specified in the front matter.\n","categories":"","description":"","excerpt":" 系统环境：Windows 11 64位\n1.下载Hugo：Hugo Releases ，并解压\n2.添加环境变量\n在设置-系统-系统信息-高级系统设置-环境变量-系统变量-Path添加解压的文件夹目录地址\n或直接搜索编辑系统环境变量 ，在 环境变量-系统变量-Path添加解压的文件夹目录地址\n3.Win+R打开运行输入cmd打开命令指令行，输入\nhugo version 检查全局变量是否生效，返 …","ref":"/ja/blog/2023/07/06/%E5%87%86%E5%A4%87/","tags":"","title":"准备"},{"body":" 系统环境：Windows 11 64位\n1.下载Hugo：Hugo Releases ，并解压\n2.添加环境变量\n在设置-系统-系统信息-高级系统设置-环境变量-系统变量-Path添加解压的文件夹目录地址\n或直接搜索编辑系统环境变量 ，在 环境变量-系统变量-Path添加解压的文件夹目录地址\n3.Win+R打开运行输入cmd打开命令指令行，输入\nhugo version 检查全局变量是否生效，返回以下内容说明hugo安装成功\nhugo v0.115.1-857374e69358f788bd31ddc55255c5c8e3dcfd80+extended windows/amd64 BuildDate=2023-07-03T17:28:25Z VendorInfo=gohugoio 4.使用hugo新建一个博客，在命令行输入\n# 两种配置文件格式 hugo new site blog\t# toml格式 hugo new site blog -f yml\t# yml格式 # 生成的目录结构 ├─assets\t资源目录 ├─content\t内容目录(存放.md文件) 就是要发布的文章 ├─data\t数据目录 ├─layouts\t网站模版目录 ├─public\t存放生成的站点文件 ├─static\t静态文件目录(JS、CSS、图片) ├─themes\t主题目录 ├─archetypes\t(存放.md文件的模板) 就是生成文章时用到前言模板 │ default.md 内容模版 └─config.toml\t配置文件 5.启动服务器\ncd blog hugo server 在浏览器输入http://localhost:1313/打开网站\n显示Page Not Found说明网站搭建成功\n6.安装主题\nHugo Themes\n使用的主题模板：docsy\n用git将项目克隆到themes文件夹里面\ndocsy-example\nIncluding images Here’s an image (hugo.jpg) that includes a byline and a caption.\nFetch and scale an image in the upcoming Hugo 0.43. Photo: 你好\rThe front matter of this post specifies properties to be assigned to all image resources:\nresources: - src: \"**.{png,jpg}\" title: \"Image #:counter\" params: byline: \"Photo: Riona MacNamara / CC-BY-CA\" To include the image in a page, specify its details like this:\nFetch and scale an image in the upcoming Hugo 0.43. Photo: 你好\rThe image will be rendered at the size and byline specified in the front matter.\n","categories":"","description":"","excerpt":" 系统环境：Windows 11 64位\n1.下载Hugo：Hugo Releases ，并解压\n2.添加环境变量\n在设置-系统-系统信息-高级系统设置-环境变量-系统变量-Path添加解压的文件夹目录地址\n或直接搜索编辑系统环境变量 ，在 环境变量-系统变量-Path添加解压的文件夹目录地址\n3.Win+R打开运行输入cmd打开命令指令行，输入\nhugo version 检查全局变量是否生效，返 …","ref":"/zh-cn/blog/2023/07/06/%E5%87%86%E5%A4%87/","tags":"","title":"准备"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ja/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/en/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ja/categories/effective-java/","tags":"","title":"Effective Java"},{"body":"","categories":"","description":"","excerpt":"","ref":"/en/categories/effective-java/","tags":"","title":"Effective Java"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/categories/effective-java/","tags":"","title":"Effective Java"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ja/tags/java/","tags":"","title":"Java"},{"body":"","categories":"","description":"","excerpt":"","ref":"/en/tags/java/","tags":"","title":"Java"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/tags/java/","tags":"","title":"Java"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ja/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/en/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/en/blog/hugo/","tags":"","title":"Hugo"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ja/blog/hugo/","tags":"","title":"Hugo"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/blog/hugo/","tags":"","title":"Hugo"},{"body":"","categories":"","description":"","excerpt":"","ref":"/en/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ja/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/zh-cn/search/","tags":"","title":"Search Results"},{"body":"\r一个博客，记录学习\r开始阅读 笔记源码 学而不已，阖棺而止\nGoldydocs provides a single web UI providing visibility into porridge temperature, chair size, and bed softness metrics! You can even find out who’s been eating your porridge.\n(Sadly, Goldydocs isn’t a real project, but you can use this site as an example to create your own real websites with Docsy)\nNew chair metrics!\rThe Goldydocs UI now shows chair size metrics by default.\nPlease follow this space for updates!\nContributions welcome!\rWe do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more …\nFollow us on Twitter!\rFor announcement of latest features etc.\nRead more …\nThis is the second section\nDownload from AppStore\rGet the Goldydocs app!\nContributions welcome!\rWe do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more …\nFollow us on Twitter!\rFor announcement of latest features etc.\nRead more …\nThis is the another section\n","categories":"","description":"","excerpt":"\r一个博客，记录学习\r开始阅读 笔记源码 学而不已，阖棺而止\nGoldydocs provides a single web UI providing visibility into porridge temperature, chair size, and bed softness metrics! You can even find out who’s been eating your …","ref":"/en/","tags":"","title":"x-windy"},{"body":"\r一个博客，记录学习\r开始阅读 笔记源码 学而不已，阖棺而止\nGoldydocs provides a single web UI providing visibility into porridge temperature, chair size, and bed softness metrics! You can even find out who’s been eating your porridge.\n(Sadly, Goldydocs isn’t a real project, but you can use this site as an example to create your own real websites with Docsy)\nNew chair metrics!\rThe Goldydocs UI now shows chair size metrics by default.\nPlease follow this space for updates!\nContributions welcome!\rWe do a Pull Request contributions workflow on GitHub. New users are always welcome!\n続きを読む …\nFollow us on Twitter!\rFor announcement of latest features etc.\n続きを読む …\nThis is the second section\nDownload from AppStore\rGet the Goldydocs app!\nContributions welcome!\rWe do a Pull Request contributions workflow on GitHub. New users are always welcome!\n続きを読む …\nFollow us on Twitter!\rFor announcement of latest features etc.\n続きを読む …\nThis is the another section\n","categories":"","description":"","excerpt":"\r一个博客，记录学习\r开始阅读 笔记源码 学而不已，阖棺而止\nGoldydocs provides a single web UI providing visibility into porridge temperature, chair size, and bed softness metrics! You can even find out who’s been eating your …","ref":"/ja/","tags":"","title":"x-windy"},{"body":"\r一个博客，记录学习\r开始阅读 笔记源码 学而不已，阖棺而止\nGoldydocs provides a single web UI providing visibility into porridge temperature, chair size, and bed softness metrics! You can even find out who’s been eating your porridge.\n(Sadly, Goldydocs isn’t a real project, but you can use this site as an example to create your own real websites with Docsy)\nNew chair metrics!\rThe Goldydocs UI now shows chair size metrics by default.\nPlease follow this space for updates!\nContributions welcome!\rWe do a Pull Request contributions workflow on GitHub. New users are always welcome!\n更多 …\nFollow us on Twitter!\rFor announcement of latest features etc.\n更多 …\nThis is the second section\nDownload from AppStore\rGet the Goldydocs app!\nContributions welcome!\rWe do a Pull Request contributions workflow on GitHub. New users are always welcome!\n更多 …\nFollow us on Twitter!\rFor announcement of latest features etc.\n更多 …\nThis is the another section\n","categories":"","description":"","excerpt":"\r一个博客，记录学习\r开始阅读 笔记源码 学而不已，阖棺而止\nGoldydocs provides a single web UI providing visibility into porridge temperature, chair size, and bed softness metrics! You can even find out who’s been eating your …","ref":"/zh-cn/","tags":"","title":"x-windy"},{"body":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will be listed in reverse chronological order.\n","categories":"","description":"","excerpt":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will be listed in reverse chronological order.\n","ref":"/en/blog/","tags":"","title":"博客"},{"body":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will be listed in reverse chronological order.\n","categories":"","description":"","excerpt":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will be listed in reverse chronological order.\n","ref":"/ja/blog/","tags":"","title":"博客"},{"body":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will be listed in reverse chronological order.\n","categories":"","description":"","excerpt":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will be listed in reverse chronological order.\n","ref":"/zh-cn/blog/","tags":"","title":"博客"}]